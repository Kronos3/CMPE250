


ARM Macro Assembler    Page 1 Program Title for Listing Header Goes Here


    1 00000000                 TTL              Program Title for Listing Header Goes Here
    2 00000000         ;****************************************************************
    3 00000000         ;Descriptive comment header goes here.
    4 00000000         ;Compute F = P + 3Q + 65, G = 3P - 2Q + 12, and Result = F + G with byte overflow checking
    5 00000000         ;Name:  Andrei Tumbar
    6 00000000         ;Date:  9/13/2020
    7 00000000         ;Class:  CMPE-250
    8 00000000         ;Section:  5, Tuesday, 11 AM
    9 00000000         ;---------------------------------------------------------------
   10 00000000         ;Keil Simulator Template for KL46
   11 00000000         ;R. W. Melton
   12 00000000         ;January 5, 2018
   13 00000000         ;****************************************************************
   14 00000000         ;Assembler directives
   15 00000000                 THUMB
   17 00000000         ;****************************************************************
   18 00000000         ;EQUates
   19 00000000         ;Standard data masks
   20 00000000 000000FF 
                       BYTE_MASK
                               EQU              0xFF
   21 00000000 0000000F 
                       NIBBLE_MASK
                               EQU              0x0F
   22 00000000         ;Standard data sizes (in bits)
   23 00000000 00000008 
                       BYTE_BITS
                               EQU              8
   24 00000000 00000004 
                       NIBBLE_BITS
                               EQU              4
   25 00000000         ;Architecture data sizes (in bytes)
   26 00000000 00000004 
                       WORD_SIZE
                               EQU              4           ;Cortex-M0+
   27 00000000 00000002 
                       HALFWORD_SIZE
                               EQU              2           ;Cortex-M0+
   28 00000000         ;Architecture data masks
   29 00000000 0000FFFF 
                       HALFWORD_MASK
                               EQU              0xFFFF



ARM Macro Assembler    Page 2 Program Title for Listing Header Goes Here


   30 00000000         ;Return                 
   31 00000000 00000001 
                       RET_ADDR_T_MASK
                               EQU              1           ;Bit 0 of ret. addr. must be
   32 00000000         ;set for BX, BLX, or POP
   33 00000000         ;mask in thumb mode
   34 00000000         ;---------------------------------------------------------------
   35 00000000         ;Vectors
   36 00000000 000000C0 
                       VECTOR_TABLE_SIZE
                               EQU              0x000000C0  ;KL46
   37 00000000 00000004 
                       VECTOR_SIZE
                               EQU              4           ;Bytes per vector
   38 00000000         ;---------------------------------------------------------------
   39 00000000         ;CPU CONTROL:  Control register
   40 00000000         ;31-2:(reserved)
   41 00000000         ;   1:SPSEL=current stack pointer select
   42 00000000         ;           0=MSP (main stack pointer) (reset value)
   43 00000000         ;           1=PSP (process stack pointer)
   44 00000000         ;   0:nPRIV=not privileged
   45 00000000         ;        0=privileged (Freescale/NXP "supervisor") (reset value)
   46 00000000         ;        1=not privileged (Freescale/NXP "user")
   47 00000000 00000002 
                       CONTROL_SPSEL_MASK
                               EQU              2
   48 00000000 00000001 
                       CONTROL_SPSEL_SHIFT
                               EQU              1
   49 00000000 00000001 
                       CONTROL_nPRIV_MASK
                               EQU              1
   50 00000000 00000000 
                       CONTROL_nPRIV_SHIFT
                               EQU              0
   51 00000000         ;---------------------------------------------------------------
   52 00000000         ;CPU PRIMASK:  Interrupt mask register
   53 00000000         ;31-1:(reserved)
   54 00000000         ;   0:PM=prioritizable interrupt mask:
   55 00000000         ;        0=all interrupts unmasked (reset value)
   56 00000000         ;          (value after CPSIE I instruction)
   57 00000000         ;        1=prioritizable interrrupts masked



ARM Macro Assembler    Page 3 Program Title for Listing Header Goes Here


   58 00000000         ;          (value after CPSID I instruction)
   59 00000000 00000001 
                       PRIMASK_PM_MASK
                               EQU              1
   60 00000000 00000000 
                       PRIMASK_PM_SHIFT
                               EQU              0
   61 00000000         ;---------------------------------------------------------------
   62 00000000         ;CPU PSR:  Program status register
   63 00000000         ;Combined APSR, EPSR, and IPSR
   64 00000000         ;----------------------------------------------------------
   65 00000000         ;CPU APSR:  Application Program Status Register
   66 00000000         ;31  :N=negative flag
   67 00000000         ;30  :Z=zero flag
   68 00000000         ;29  :C=carry flag
   69 00000000         ;28  :V=overflow flag
   70 00000000         ;27-0:(reserved)
   71 00000000 F0000000 
                       APSR_MASK
                               EQU              0xF0000000
   72 00000000 0000001C 
                       APSR_SHIFT
                               EQU              28
   73 00000000 80000000 
                       APSR_N_MASK
                               EQU              0x80000000
   74 00000000 0000001F 
                       APSR_N_SHIFT
                               EQU              31
   75 00000000 40000000 
                       APSR_Z_MASK
                               EQU              0x40000000
   76 00000000 0000001E 
                       APSR_Z_SHIFT
                               EQU              30
   77 00000000 20000000 
                       APSR_C_MASK
                               EQU              0x20000000
   78 00000000 0000001D 
                       APSR_C_SHIFT
                               EQU              29
   79 00000000 10000000 



ARM Macro Assembler    Page 4 Program Title for Listing Header Goes Here


                       APSR_V_MASK
                               EQU              0x10000000
   80 00000000 0000001C 
                       APSR_V_SHIFT
                               EQU              28
   81 00000000         ;----------------------------------------------------------
   82 00000000         ;CPU EPSR
   83 00000000         ;31-25:(reserved)
   84 00000000         ;   24:T=Thumb state bit
   85 00000000         ;23- 0:(reserved)
   86 00000000 01000000 
                       EPSR_MASK
                               EQU              0x01000000
   87 00000000 00000018 
                       EPSR_SHIFT
                               EQU              24
   88 00000000 01000000 
                       EPSR_T_MASK
                               EQU              0x01000000
   89 00000000 00000018 
                       EPSR_T_SHIFT
                               EQU              24
   90 00000000         ;----------------------------------------------------------
   91 00000000         ;CPU IPSR
   92 00000000         ;31-6:(reserved)
   93 00000000         ; 5-0:Exception number=number of current exception
   94 00000000         ;      0=thread mode
   95 00000000         ;      1:(reserved)
   96 00000000         ;      2=NMI
   97 00000000         ;      3=hard fault
   98 00000000         ;      4-10:(reserved)
   99 00000000         ;     11=SVCall
  100 00000000         ;     12-13:(reserved)
  101 00000000         ;     14=PendSV
  102 00000000         ;     15=SysTick
  103 00000000         ;     16=IRQ0
  104 00000000         ;     16-47:IRQ(Exception number - 16)
  105 00000000         ;     47=IRQ31
  106 00000000         ;     48-63:(reserved)
  107 00000000 0000003F 
                       IPSR_MASK
                               EQU              0x0000003F



ARM Macro Assembler    Page 5 Program Title for Listing Header Goes Here


  108 00000000 00000000 
                       IPSR_SHIFT
                               EQU              0
  109 00000000 0000003F 
                       IPSR_EXCEPTION_MASK
                               EQU              0x0000003F
  110 00000000 00000000 
                       IPSR_EXCEPTION_SHIFT
                               EQU              0
  111 00000000         ;----------------------------------------------------------
  112 00000000 80000000 
                       PSR_N_MASK
                               EQU              APSR_N_MASK
  113 00000000 0000001F 
                       PSR_N_SHIFT
                               EQU              APSR_N_SHIFT
  114 00000000 40000000 
                       PSR_Z_MASK
                               EQU              APSR_Z_MASK
  115 00000000 0000001E 
                       PSR_Z_SHIFT
                               EQU              APSR_Z_SHIFT
  116 00000000 20000000 
                       PSR_C_MASK
                               EQU              APSR_C_MASK
  117 00000000 0000001D 
                       PSR_C_SHIFT
                               EQU              APSR_C_SHIFT
  118 00000000 10000000 
                       PSR_V_MASK
                               EQU              APSR_V_MASK
  119 00000000 0000001C 
                       PSR_V_SHIFT
                               EQU              APSR_V_SHIFT
  120 00000000 01000000 
                       PSR_T_MASK
                               EQU              EPSR_T_MASK
  121 00000000 00000018 
                       PSR_T_SHIFT
                               EQU              EPSR_T_SHIFT
  122 00000000 0000003F 
                       PSR_EXCEPTION_MASK



ARM Macro Assembler    Page 6 Program Title for Listing Header Goes Here


                               EQU              IPSR_EXCEPTION_MASK
  123 00000000 00000000 
                       PSR_EXCEPTION_SHIFT
                               EQU              IPSR_EXCEPTION_SHIFT
  124 00000000         ;----------------------------------------------------------
  125 00000000         ;Stack
  126 00000000 00000100 
                       SSTACK_SIZE
                               EQU              0x00000100
  127 00000000         ;****************************************************************
  128 00000000         ;Program
  129 00000000         ;Linker requires Reset_Handler
  130 00000000                 AREA             MyCode,CODE,READONLY
  131 00000000                 ENTRY
  132 00000000                 EXPORT           Reset_Handler
  133 00000000         Reset_Handler
                               PROC             {}
  134 00000000         main
  135 00000000         ;---------------------------------------------------------------
  136 00000000         ;Initialize registers R0-R12
  137 00000000         
  138 00000000         ;>>>>> begin main program code <<<<<
  139 00000000         ; Disable interrupts
  140 00000000         ; F = P + 3Q + 65
  141 00000000         ; G = 3P -2Q + 12
  142 00000000         ; Load the input set
  143 00000000         
  144 00000000         
  145 00000000 4931            LDR              R1,=P
  146 00000002 6809            LDR              R1,[R1,#0]  ; R1 = P
  147 00000004 4A31            LDR              R2,=Q
  148 00000006 6812            LDR              R2,[R2,#0]  ; R2 = Q
  149 00000008         
  150 00000008         ; Compute 3Q and store into R3
  151 00000008 0050            LSLS             R0,R2,#1    ; R3 = 2Q
  152 0000000A 1880            ADDS             R0,R0,R2    ; R3 = 2Q + Q = 3Q
  153 0000000C F7FF FFFE       BL               CHECKOVER   ; Check if R0 overflows
  154 00000010 D60B            BVS              FOVERFLOW
  155 00000012         
  156 00000012 1840            ADDS             R0,R0,R1    ; R3 = P + 3Q
  157 00000014 F7FF FFFE       BL               CHECKOVER   ; Check if R0 overflows
  158 00000018 D607            BVS              FOVERFLOW



ARM Macro Assembler    Page 7 Program Title for Listing Header Goes Here


  159 0000001A         
  160 0000001A 4B2D            LDR              R3,=const_F
  161 0000001C 681B            LDR              R3,[R3,#0]  ; R4 = const_F
  162 0000001E 18C0            ADDS             R0,R0,R3    ; R3 = P + 3Q + 65
  163 00000020 F7FF FFFE       BL               CHECKOVER   ; Check if R0 overflows
  164 00000024 D601            BVS              FOVERFLOW
  165 00000026 F000 F801       BL               FSTOP       ; Finished with F calculation
  166 0000002A         
  167 0000002A 2000    FOVERFLOW
                               MOVS             R0,#0       ; Overflow occured, clear the result
  168 0000002C 4B29    FSTOP   LDR              R3,=F
  169 0000002E 6018            STR              R0,[R3,#0]  ; Store the result 'R3' into F
  170 00000030         
  171 00000030         ; G = 3P -2Q + 12
  172 00000030 0048            LSLS             R0,R1,#1    ; R3 = 2P
  173 00000032 1840            ADDS             R0,R0,R1    ; R3 = 3P
  174 00000034 F7FF FFFE       BL               CHECKOVER
  175 00000038 D612            BVS              GOVERFLOW
  176 0000003A         
  177 0000003A 0053            LSLS             R3,R2,#1    ; R3 = 2Q
  178 0000003C B401            PUSH             {R0}        ; Save the old R0 so we can use R3 in CHECKOVER
  179 0000003E 0018            MOVS             R0,R3       ; Init R0 as the input param for CHECKOVER
  180 00000040 F7FF FFFE       BL               CHECKOVER
  181 00000044 D60C            BVS              GOVERFLOW
  182 00000046 BC01            POP              {R0}        ; Restore R0
  183 00000048         
  184 00000048 1AC0            SUBS             R0,R0,R3    ; R3 = 3P - 2Q
  185 0000004A F7FF FFFE       BL               CHECKOVER
  186 0000004E D607            BVS              GOVERFLOW
  187 00000050         
  188 00000050 4B21            LDR              R3,=const_G
  189 00000052 681B            LDR              R3,[R3,#0]  ; R4 = const_G
  190 00000054 18C0            ADDS             R0,R0,R3    ; R3 = 3P - 2Q + 12
  191 00000056 F7FF FFFE       BL               CHECKOVER
  192 0000005A D601            BVS              GOVERFLOW
  193 0000005C F000 F801       BL               GSTOP       ; Finished with F calculation
  194 00000060         
  195 00000060 2000    GOVERFLOW
                               MOVS             R0,#0       ; Overflow occured, clear the result
  196 00000062 4B1E    GSTOP   LDR              R3,=G
  197 00000064 6018            STR              R0,[R3,#0]  ; Store the result 'R0' into G
  198 00000066         



ARM Macro Assembler    Page 8 Program Title for Listing Header Goes Here


  199 00000066         ; Compute Result = F + G
  200 00000066 491B            LDR              R1,=F
  201 00000068 6809            LDR              R1,[R1,#0]  ; Load F into R1
  202 0000006A 4A1C            LDR              R2,=G
  203 0000006C 6812            LDR              R2,[R2,#0]  ; Load G into R2
  204 0000006E 1888            ADDS             R0,R1,R2    ; Compute Result
  205 00000070 F7FF FFFE       BL               CHECKOVER   ; Check if result overflows
  206 00000074 D601            BVS              RESOVER
  207 00000076 F000 F801       BL               RESSTOP
  208 0000007A         
  209 0000007A 2000    RESOVER MOVS             R0,#0
  210 0000007C 4B18    RESSTOP LDR              R3,=Result  ; Load the R0 into the result variable
  211 0000007E 6018            STR              R0,[R3,#0]
  212 00000080         
  213 00000080         ;>>>>>   end main program code <<<<<
  214 00000080         ;Stay here
  215 00000080 E7FE            B                .
  216 00000082                 ENDP
  217 00000082         
  218 00000082         CHECKOVER
                               PROC             {R0}        ; Check if R0 is in range and set flags
  219 00000082 B401            PUSH             {R0}
  220 00000084 287F            CMP              R0,#127
  221 00000086 DCFE            BGT              OVERFLOW
  222 00000088 38FF            SUBS             R0,R0,#0xFF
  223 0000008A 1E40            SUBS             R0,R0,#0x1
  224 0000008C DCFE            BGT              OVERFLOW
  225 0000008E BC01            POP              {R0}
  226 00000090 4770            BX               LR
  227 00000092                 ENDP
  228 00000092         
  229 00000092         OVERFLOW
                               PROC             {R0}
  230 00000092 4816            LDR              R0,=0x7FFFFFFF
  231 00000094 1C40            ADDS             R0,R0,#1    ; Set the overflow flag
  232 00000096 4770            BX               LR
  233 00000098                 ENDP
  234 00000098         
  235 00000098         ;---------------------------------------------------------------
  236 00000098         RegInit PROC             {}
  237 00000098         ;****************************************************************
  238 00000098         ;Initializes register n to value 0xnnnnnnnn, for n in 



ARM Macro Assembler    Page 9 Program Title for Listing Header Goes Here


  239 00000098         ;{0x0-0xC,0xE}
  240 00000098         ;****************************************************************
  241 00000098         ;Put return on stack
  242 00000098 B500            PUSH             {LR}
  243 0000009A         ;Initialize registers
  244 0000009A 4915            LDR              R1,=0x11111111
  245 0000009C 184A            ADDS             R2,R1,R1
  246 0000009E 1853            ADDS             R3,R2,R1
  247 000000A0 185C            ADDS             R4,R3,R1
  248 000000A2 1865            ADDS             R5,R4,R1
  249 000000A4 186E            ADDS             R6,R5,R1
  250 000000A6 1877            ADDS             R7,R6,R1
  251 000000A8 1878            ADDS             R0,R7,R1
  252 000000AA 4680            MOV              R8,R0
  253 000000AC 1840            ADDS             R0,R0,R1
  254 000000AE 4681            MOV              R9,R0
  255 000000B0 1840            ADDS             R0,R0,R1
  256 000000B2 4682            MOV              R10,R0
  257 000000B4 1840            ADDS             R0,R0,R1
  258 000000B6 4683            MOV              R11,R0
  259 000000B8 1840            ADDS             R0,R0,R1
  260 000000BA 4684            MOV              R12,R0
  261 000000BC 1840            ADDS             R0,R0,R1
  262 000000BE 1840            ADDS             R0,R0,R1
  263 000000C0 4686            MOV              R14,R0
  264 000000C2 2000            MOVS             R0,#0
  265 000000C4 BD00            POP              {PC}
  266 000000C6                 ENDP
  267 000000C6         ;---------------------------------------------------------------
  268 000000C6         ;>>>>> begin subroutine code <<<<<
  269 000000C6         ;>>>>>   end subroutine code <<<<<
  270 000000C6 00 00           ALIGN
  271 000000C8         ;****************************************************************
  272 000000C8         ;Vector Table Mapped to Address 0 at Reset
  273 000000C8         ;Linker requires __Vectors to be exported
  274 000000C8 00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 



ARM Macro Assembler    Page 10 Program Title for Listing Header Goes Here


              00000000 
              00000000 
              7FFFFFFF 
              11111111         AREA             RESET, DATA, READONLY
  275 00000000                 EXPORT           __Vectors
  276 00000000                 EXPORT           __Vectors_End
  277 00000000                 EXPORT           __Vectors_Size
  278 00000000         __Vectors
  279 00000000         ;ARM core vectors
  280 00000000 00000000        DCD              __initial_sp ;00:end of stack
  281 00000004 00000000        DCD              Reset_Handler ;reset vector
  282 00000008 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 11 Program Title for Listing Header Goes Here


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00               SPACE            (VECTOR_TABLE_SIZE - (2 * VECTOR_SIZE))
  283 000000C0         __Vectors_End
  284 000000C0 000000C0 
                       __Vectors_Size
                               EQU              __Vectors_End - __Vectors
  285 000000C0                 ALIGN
  286 000000C0         ;****************************************************************
  287 000000C0         ;Constants
  288 000000C0                 AREA             MyConst,DATA,READONLY
  289 00000000         ;>>>>> begin constants here <<<<<
  290 00000000 00000041 
                       const_F DCD              65



ARM Macro Assembler    Page 12 Program Title for Listing Header Goes Here


  291 00000004 0000000C 
                       const_G DCD              12
  292 00000008         ;>>>>>   end constants here <<<<<
  293 00000008         ;****************************************************************
  294 00000008                 AREA             |.ARM.__at_0x1FFFE000|,DATA,READWRITE,ALIGN=3
  295 00000000                 EXPORT           __initial_sp
  296 00000000         ;Allocate system stack
  297 00000000                 IF               :LNOT::DEF:SSTACK_SIZE
  299                          ENDIF
  300 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 13 Program Title for Listing Header Goes Here


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 14 Program Title for Listing Header Goes Here


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       Stack_Mem
                               SPACE            SSTACK_SIZE
  301 00000100         __initial_sp
  302 00000100         ;****************************************************************
  303 00000100         ;Variables
  304 00000100                 AREA             MyData,DATA,READWRITE
  305 00000000         ;>>>>> begin variables here <<<<<
  306 00000000 00 00 00 
              00       P       SPACE            4
  307 00000004 00 00 00 
              00       Q       SPACE            4
  308 00000008 00 00 00 
              00       F       SPACE            4
  309 0000000C 00 00 00 
              00       G       SPACE            4
  310 00000010 00 00 00 
              00       Result  SPACE            4
  311 00000014         
  312 00000014         ;>>>>>   end variables here <<<<<
  313 00000014                 END
Command Line: --debug --xref --length=49 --width=120 --diag_suppress=9931 --cpu=Cortex-M0+ --apcs=interwork --depend=.\o
bjects\exercise03.d -o.\objects\exercise03.o -I"C:\Users\Andrei Tumbar\AppData\Local\Arm\Packs\Keil\Kinetis_KLxx_DFP\1.1
4.0\Device\Include" -IC:\Keil_v5\ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 531" 
--predefine="MKL46Z256xxx4 SETA 1" --list=.\listings\exercise03.lst Exercise03.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CHECKOVER 00000082

Symbol: CHECKOVER
   Definitions
      At line 218 in file Exercise03.s
   Uses
      At line 153 in file Exercise03.s
      At line 157 in file Exercise03.s
      At line 163 in file Exercise03.s
      At line 174 in file Exercise03.s
      At line 180 in file Exercise03.s
      At line 185 in file Exercise03.s
      At line 191 in file Exercise03.s
      At line 205 in file Exercise03.s

FOVERFLOW 0000002A

Symbol: FOVERFLOW
   Definitions
      At line 167 in file Exercise03.s
   Uses
      At line 154 in file Exercise03.s
      At line 158 in file Exercise03.s
      At line 164 in file Exercise03.s

FSTOP 0000002C

Symbol: FSTOP
   Definitions
      At line 168 in file Exercise03.s
   Uses
      At line 165 in file Exercise03.s
Comment: FSTOP used once
GOVERFLOW 00000060

Symbol: GOVERFLOW
   Definitions
      At line 195 in file Exercise03.s
   Uses
      At line 175 in file Exercise03.s
      At line 181 in file Exercise03.s
      At line 186 in file Exercise03.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 192 in file Exercise03.s

GSTOP 00000062

Symbol: GSTOP
   Definitions
      At line 196 in file Exercise03.s
   Uses
      At line 193 in file Exercise03.s
Comment: GSTOP used once
MyCode 00000000

Symbol: MyCode
   Definitions
      At line 130 in file Exercise03.s
   Uses
      None
Comment: MyCode unused
OVERFLOW 00000092

Symbol: OVERFLOW
   Definitions
      At line 229 in file Exercise03.s
   Uses
      At line 221 in file Exercise03.s
      At line 224 in file Exercise03.s

RESOVER 0000007A

Symbol: RESOVER
   Definitions
      At line 209 in file Exercise03.s
   Uses
      At line 206 in file Exercise03.s
Comment: RESOVER used once
RESSTOP 0000007C

Symbol: RESSTOP
   Definitions
      At line 210 in file Exercise03.s
   Uses
      At line 207 in file Exercise03.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Comment: RESSTOP used once
RegInit 00000098

Symbol: RegInit
   Definitions
      At line 236 in file Exercise03.s
   Uses
      None
Comment: RegInit unused
Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 133 in file Exercise03.s
   Uses
      At line 132 in file Exercise03.s
      At line 281 in file Exercise03.s

main 00000000

Symbol: main
   Definitions
      At line 134 in file Exercise03.s
   Uses
      None
Comment: main unused
12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 274 in file Exercise03.s
   Uses
      None
Comment: RESET unused
__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 278 in file Exercise03.s
   Uses
      At line 275 in file Exercise03.s
      At line 284 in file Exercise03.s

__Vectors_End 000000C0

Symbol: __Vectors_End
   Definitions
      At line 283 in file Exercise03.s
   Uses
      At line 276 in file Exercise03.s
      At line 284 in file Exercise03.s

3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MyConst 00000000

Symbol: MyConst
   Definitions
      At line 288 in file Exercise03.s
   Uses
      None
Comment: MyConst unused
const_F 00000000

Symbol: const_F
   Definitions
      At line 290 in file Exercise03.s
   Uses
      At line 160 in file Exercise03.s
Comment: const_F used once
const_G 00000004

Symbol: const_G
   Definitions
      At line 291 in file Exercise03.s
   Uses
      At line 188 in file Exercise03.s
Comment: const_G used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.ARM.__at_0x1FFFE000 00000000

Symbol: .ARM.__at_0x1FFFE000
   Definitions
      At line 294 in file Exercise03.s
   Uses
      None
Comment: .ARM.__at_0x1FFFE000 unused
Stack_Mem 00000000

Symbol: Stack_Mem
   Definitions
      At line 300 in file Exercise03.s
   Uses
      None
Comment: Stack_Mem unused
__initial_sp 00000100

Symbol: __initial_sp
   Definitions
      At line 301 in file Exercise03.s
   Uses
      At line 280 in file Exercise03.s
      At line 295 in file Exercise03.s

3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

F 00000008

Symbol: F
   Definitions
      At line 308 in file Exercise03.s
   Uses
      At line 168 in file Exercise03.s
      At line 200 in file Exercise03.s

G 0000000C

Symbol: G
   Definitions
      At line 309 in file Exercise03.s
   Uses
      At line 196 in file Exercise03.s
      At line 202 in file Exercise03.s

MyData 00000000

Symbol: MyData
   Definitions
      At line 304 in file Exercise03.s
   Uses
      None
Comment: MyData unused
P 00000000

Symbol: P
   Definitions
      At line 306 in file Exercise03.s
   Uses
      At line 145 in file Exercise03.s
Comment: P used once
Q 00000004

Symbol: Q
   Definitions
      At line 307 in file Exercise03.s
   Uses
      At line 147 in file Exercise03.s
Comment: Q used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Result 00000010

Symbol: Result
   Definitions
      At line 310 in file Exercise03.s
   Uses
      At line 210 in file Exercise03.s
Comment: Result used once
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

APSR_C_MASK 20000000

Symbol: APSR_C_MASK
   Definitions
      At line 77 in file Exercise03.s
   Uses
      At line 116 in file Exercise03.s
Comment: APSR_C_MASK used once
APSR_C_SHIFT 0000001D

Symbol: APSR_C_SHIFT
   Definitions
      At line 78 in file Exercise03.s
   Uses
      At line 117 in file Exercise03.s
Comment: APSR_C_SHIFT used once
APSR_MASK F0000000

Symbol: APSR_MASK
   Definitions
      At line 71 in file Exercise03.s
   Uses
      None
Comment: APSR_MASK unused
APSR_N_MASK 80000000

Symbol: APSR_N_MASK
   Definitions
      At line 73 in file Exercise03.s
   Uses
      At line 112 in file Exercise03.s
Comment: APSR_N_MASK used once
APSR_N_SHIFT 0000001F

Symbol: APSR_N_SHIFT
   Definitions
      At line 74 in file Exercise03.s
   Uses
      At line 113 in file Exercise03.s
Comment: APSR_N_SHIFT used once
APSR_SHIFT 0000001C




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Symbol: APSR_SHIFT
   Definitions
      At line 72 in file Exercise03.s
   Uses
      None
Comment: APSR_SHIFT unused
APSR_V_MASK 10000000

Symbol: APSR_V_MASK
   Definitions
      At line 79 in file Exercise03.s
   Uses
      At line 118 in file Exercise03.s
Comment: APSR_V_MASK used once
APSR_V_SHIFT 0000001C

Symbol: APSR_V_SHIFT
   Definitions
      At line 80 in file Exercise03.s
   Uses
      At line 119 in file Exercise03.s
Comment: APSR_V_SHIFT used once
APSR_Z_MASK 40000000

Symbol: APSR_Z_MASK
   Definitions
      At line 75 in file Exercise03.s
   Uses
      At line 114 in file Exercise03.s
Comment: APSR_Z_MASK used once
APSR_Z_SHIFT 0000001E

Symbol: APSR_Z_SHIFT
   Definitions
      At line 76 in file Exercise03.s
   Uses
      At line 115 in file Exercise03.s
Comment: APSR_Z_SHIFT used once
BYTE_BITS 00000008

Symbol: BYTE_BITS
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 23 in file Exercise03.s
   Uses
      None
Comment: BYTE_BITS unused
BYTE_MASK 000000FF

Symbol: BYTE_MASK
   Definitions
      At line 20 in file Exercise03.s
   Uses
      None
Comment: BYTE_MASK unused
CONTROL_SPSEL_MASK 00000002

Symbol: CONTROL_SPSEL_MASK
   Definitions
      At line 47 in file Exercise03.s
   Uses
      None
Comment: CONTROL_SPSEL_MASK unused
CONTROL_SPSEL_SHIFT 00000001

Symbol: CONTROL_SPSEL_SHIFT
   Definitions
      At line 48 in file Exercise03.s
   Uses
      None
Comment: CONTROL_SPSEL_SHIFT unused
CONTROL_nPRIV_MASK 00000001

Symbol: CONTROL_nPRIV_MASK
   Definitions
      At line 49 in file Exercise03.s
   Uses
      None
Comment: CONTROL_nPRIV_MASK unused
CONTROL_nPRIV_SHIFT 00000000

Symbol: CONTROL_nPRIV_SHIFT
   Definitions
      At line 50 in file Exercise03.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

      None
Comment: CONTROL_nPRIV_SHIFT unused
EPSR_MASK 01000000

Symbol: EPSR_MASK
   Definitions
      At line 86 in file Exercise03.s
   Uses
      None
Comment: EPSR_MASK unused
EPSR_SHIFT 00000018

Symbol: EPSR_SHIFT
   Definitions
      At line 87 in file Exercise03.s
   Uses
      None
Comment: EPSR_SHIFT unused
EPSR_T_MASK 01000000

Symbol: EPSR_T_MASK
   Definitions
      At line 88 in file Exercise03.s
   Uses
      At line 120 in file Exercise03.s
Comment: EPSR_T_MASK used once
EPSR_T_SHIFT 00000018

Symbol: EPSR_T_SHIFT
   Definitions
      At line 89 in file Exercise03.s
   Uses
      At line 121 in file Exercise03.s
Comment: EPSR_T_SHIFT used once
HALFWORD_MASK 0000FFFF

Symbol: HALFWORD_MASK
   Definitions
      At line 29 in file Exercise03.s
   Uses
      None
Comment: HALFWORD_MASK unused



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

HALFWORD_SIZE 00000002

Symbol: HALFWORD_SIZE
   Definitions
      At line 27 in file Exercise03.s
   Uses
      None
Comment: HALFWORD_SIZE unused
IPSR_EXCEPTION_MASK 0000003F

Symbol: IPSR_EXCEPTION_MASK
   Definitions
      At line 109 in file Exercise03.s
   Uses
      At line 122 in file Exercise03.s
Comment: IPSR_EXCEPTION_MASK used once
IPSR_EXCEPTION_SHIFT 00000000

Symbol: IPSR_EXCEPTION_SHIFT
   Definitions
      At line 110 in file Exercise03.s
   Uses
      At line 123 in file Exercise03.s
Comment: IPSR_EXCEPTION_SHIFT used once
IPSR_MASK 0000003F

Symbol: IPSR_MASK
   Definitions
      At line 107 in file Exercise03.s
   Uses
      None
Comment: IPSR_MASK unused
IPSR_SHIFT 00000000

Symbol: IPSR_SHIFT
   Definitions
      At line 108 in file Exercise03.s
   Uses
      None
Comment: IPSR_SHIFT unused
NIBBLE_BITS 00000004




ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Absolute symbols

Symbol: NIBBLE_BITS
   Definitions
      At line 24 in file Exercise03.s
   Uses
      None
Comment: NIBBLE_BITS unused
NIBBLE_MASK 0000000F

Symbol: NIBBLE_MASK
   Definitions
      At line 21 in file Exercise03.s
   Uses
      None
Comment: NIBBLE_MASK unused
PRIMASK_PM_MASK 00000001

Symbol: PRIMASK_PM_MASK
   Definitions
      At line 59 in file Exercise03.s
   Uses
      None
Comment: PRIMASK_PM_MASK unused
PRIMASK_PM_SHIFT 00000000

Symbol: PRIMASK_PM_SHIFT
   Definitions
      At line 60 in file Exercise03.s
   Uses
      None
Comment: PRIMASK_PM_SHIFT unused
PSR_C_MASK 20000000

Symbol: PSR_C_MASK
   Definitions
      At line 116 in file Exercise03.s
   Uses
      None
Comment: PSR_C_MASK unused
PSR_C_SHIFT 0000001D

Symbol: PSR_C_SHIFT
   Definitions



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Absolute symbols

      At line 117 in file Exercise03.s
   Uses
      None
Comment: PSR_C_SHIFT unused
PSR_EXCEPTION_MASK 0000003F

Symbol: PSR_EXCEPTION_MASK
   Definitions
      At line 122 in file Exercise03.s
   Uses
      None
Comment: PSR_EXCEPTION_MASK unused
PSR_EXCEPTION_SHIFT 00000000

Symbol: PSR_EXCEPTION_SHIFT
   Definitions
      At line 123 in file Exercise03.s
   Uses
      None
Comment: PSR_EXCEPTION_SHIFT unused
PSR_N_MASK 80000000

Symbol: PSR_N_MASK
   Definitions
      At line 112 in file Exercise03.s
   Uses
      None
Comment: PSR_N_MASK unused
PSR_N_SHIFT 0000001F

Symbol: PSR_N_SHIFT
   Definitions
      At line 113 in file Exercise03.s
   Uses
      None
Comment: PSR_N_SHIFT unused
PSR_T_MASK 01000000

Symbol: PSR_T_MASK
   Definitions
      At line 120 in file Exercise03.s
   Uses



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Absolute symbols

      None
Comment: PSR_T_MASK unused
PSR_T_SHIFT 00000018

Symbol: PSR_T_SHIFT
   Definitions
      At line 121 in file Exercise03.s
   Uses
      None
Comment: PSR_T_SHIFT unused
PSR_V_MASK 10000000

Symbol: PSR_V_MASK
   Definitions
      At line 118 in file Exercise03.s
   Uses
      None
Comment: PSR_V_MASK unused
PSR_V_SHIFT 0000001C

Symbol: PSR_V_SHIFT
   Definitions
      At line 119 in file Exercise03.s
   Uses
      None
Comment: PSR_V_SHIFT unused
PSR_Z_MASK 40000000

Symbol: PSR_Z_MASK
   Definitions
      At line 114 in file Exercise03.s
   Uses
      None
Comment: PSR_Z_MASK unused
PSR_Z_SHIFT 0000001E

Symbol: PSR_Z_SHIFT
   Definitions
      At line 115 in file Exercise03.s
   Uses
      None
Comment: PSR_Z_SHIFT unused



ARM Macro Assembler    Page 9 Alphabetic symbol ordering
Absolute symbols

RET_ADDR_T_MASK 00000001

Symbol: RET_ADDR_T_MASK
   Definitions
      At line 31 in file Exercise03.s
   Uses
      None
Comment: RET_ADDR_T_MASK unused
SSTACK_SIZE 00000100

Symbol: SSTACK_SIZE
   Definitions
      At line 126 in file Exercise03.s
   Uses
      At line 300 in file Exercise03.s
Comment: SSTACK_SIZE used once
VECTOR_SIZE 00000004

Symbol: VECTOR_SIZE
   Definitions
      At line 37 in file Exercise03.s
   Uses
      At line 282 in file Exercise03.s
Comment: VECTOR_SIZE used once
VECTOR_TABLE_SIZE 000000C0

Symbol: VECTOR_TABLE_SIZE
   Definitions
      At line 36 in file Exercise03.s
   Uses
      At line 282 in file Exercise03.s
Comment: VECTOR_TABLE_SIZE used once
WORD_SIZE 00000004

Symbol: WORD_SIZE
   Definitions
      At line 26 in file Exercise03.s
   Uses
      None
Comment: WORD_SIZE unused
__Vectors_Size 000000C0




ARM Macro Assembler    Page 10 Alphabetic symbol ordering
Absolute symbols

Symbol: __Vectors_Size
   Definitions
      At line 284 in file Exercise03.s
   Uses
      At line 277 in file Exercise03.s
Comment: __Vectors_Size used once
48 symbols
410 symbols in table
