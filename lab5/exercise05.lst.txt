


ARM Macro Assembler    Page 1 Program Title for Listing Header Goes Here


    1 00000000                 TTL              Program Title for Listing Heade
r Goes Here
    2 00000000         ;*******************************************************
                       *********
    3 00000000         ;Descriptive comment header goes here.
    4 00000000         ;Secure string I/O and printing decimal numbers
    5 00000000         ;Name:  Andrei Tumbar
    6 00000000         ;Date:  9/21/2020
    7 00000000         ;Class:  CMPE-250
    8 00000000         ;Section:  5, Tuesday, 11 AM
    9 00000000         ;-------------------------------------------------------
                       --------
   10 00000000         ;Keil Simulator Template for KL46
   11 00000000         ;R. W. Melton
   12 00000000         ;January 5, 2018
   13 00000000         ;*******************************************************
                       *********
   14 00000000         ;Assembler directives
   15 00000000                 THUMB
   17 00000000         ;*******************************************************
                       *********
   18 00000000         ;EQUates
   19 00000000         ;Standard data masks
   20 00000000 000000FF 
                       BYTE_MASK
                               EQU              0xFF
   21 00000000 0000000F 
                       NIBBLE_MASK
                               EQU              0x0F
   22 00000000         ;Standard data sizes (in bits)
   23 00000000 00000008 
                       BYTE_BITS
                               EQU              8
   24 00000000 00000004 
                       NIBBLE_BITS
                               EQU              4
   25 00000000         ;Architecture data sizes (in bytes)
   26 00000000 00000004 
                       WORD_SIZE
                               EQU              4           ;Cortex-M0+
   27 00000000 00000002 
                       HALFWORD_SIZE
                               EQU              2           ;Cortex-M0+
   28 00000000         ;Architecture data masks
   29 00000000 0000FFFF 
                       HALFWORD_MASK
                               EQU              0xFFFF
   30 00000000         ;Return                 
   31 00000000 00000001 
                       RET_ADDR_T_MASK
                               EQU              1           ;Bit 0 of ret. addr
                                                            . must be
   32 00000000         ;set for BX, BLX, or POP
   33 00000000         ;mask in thumb mode
   34 00000000         ;-------------------------------------------------------
                       --------
   35 00000000         ;Vectors
   36 00000000 000000C0 
                       VECTOR_TABLE_SIZE



ARM Macro Assembler    Page 2 Program Title for Listing Header Goes Here


                               EQU              0x000000C0  ;KL46
   37 00000000 00000004 
                       VECTOR_SIZE
                               EQU              4           ;Bytes per vector
   38 00000000         ;-------------------------------------------------------
                       --------
   39 00000000         ;CPU CONTROL:  Control register
   40 00000000         ;31-2:(reserved)
   41 00000000         ;   1:SPSEL=current stack pointer select
   42 00000000         ;           0=MSP (main stack pointer) (reset value)
   43 00000000         ;           1=PSP (process stack pointer)
   44 00000000         ;   0:nPRIV=not privileged
   45 00000000         ;        0=privileged (Freescale/NXP "supervisor") (rese
                       t value)
   46 00000000         ;        1=not privileged (Freescale/NXP "user")
   47 00000000 00000002 
                       CONTROL_SPSEL_MASK
                               EQU              2
   48 00000000 00000001 
                       CONTROL_SPSEL_SHIFT
                               EQU              1
   49 00000000 00000001 
                       CONTROL_nPRIV_MASK
                               EQU              1
   50 00000000 00000000 
                       CONTROL_nPRIV_SHIFT
                               EQU              0
   51 00000000         ;-------------------------------------------------------
                       --------
   52 00000000         ;CPU PRIMASK:  Interrupt mask register
   53 00000000         ;31-1:(reserved)
   54 00000000         ;   0:PM=prioritizable interrupt mask:
   55 00000000         ;        0=all interrupts unmasked (reset value)
   56 00000000         ;          (value after CPSIE I instruction)
   57 00000000         ;        1=prioritizable interrrupts masked
   58 00000000         ;          (value after CPSID I instruction)
   59 00000000 00000001 
                       PRIMASK_PM_MASK
                               EQU              1
   60 00000000 00000000 
                       PRIMASK_PM_SHIFT
                               EQU              0
   61 00000000         ;-------------------------------------------------------
                       --------
   62 00000000         ;CPU PSR:  Program status register
   63 00000000         ;Combined APSR, EPSR, and IPSR
   64 00000000         ;-------------------------------------------------------
                       ---
   65 00000000         ;CPU APSR:  Application Program Status Register
   66 00000000         ;31  :N=negative flag
   67 00000000         ;30  :Z=zero flag
   68 00000000         ;29  :C=carry flag
   69 00000000         ;28  :V=overflow flag
   70 00000000         ;27-0:(reserved)
   71 00000000 F0000000 
                       APSR_MASK
                               EQU              0xF0000000
   72 00000000 0000001C 
                       APSR_SHIFT



ARM Macro Assembler    Page 3 Program Title for Listing Header Goes Here


                               EQU              28
   73 00000000 80000000 
                       APSR_N_MASK
                               EQU              0x80000000
   74 00000000 0000001F 
                       APSR_N_SHIFT
                               EQU              31
   75 00000000 40000000 
                       APSR_Z_MASK
                               EQU              0x40000000
   76 00000000 0000001E 
                       APSR_Z_SHIFT
                               EQU              30
   77 00000000 20000000 
                       APSR_C_MASK
                               EQU              0x20000000
   78 00000000 0000001D 
                       APSR_C_SHIFT
                               EQU              29
   79 00000000 10000000 
                       APSR_V_MASK
                               EQU              0x10000000
   80 00000000 0000001C 
                       APSR_V_SHIFT
                               EQU              28
   81 00000000         ;-------------------------------------------------------
                       ---
   82 00000000         ;CPU EPSR
   83 00000000         ;31-25:(reserved)
   84 00000000         ;   24:T=Thumb state bit
   85 00000000         ;23- 0:(reserved)
   86 00000000 01000000 
                       EPSR_MASK
                               EQU              0x01000000
   87 00000000 00000018 
                       EPSR_SHIFT
                               EQU              24
   88 00000000 01000000 
                       EPSR_T_MASK
                               EQU              0x01000000
   89 00000000 00000018 
                       EPSR_T_SHIFT
                               EQU              24
   90 00000000         ;-------------------------------------------------------
                       ---
   91 00000000         ;CPU IPSR
   92 00000000         ;31-6:(reserved)
   93 00000000         ; 5-0:Exception number=number of current exception
   94 00000000         ;      0=thread mode
   95 00000000         ;      1:(reserved)
   96 00000000         ;      2=NMI
   97 00000000         ;      3=hard fault
   98 00000000         ;      4-10:(reserved)
   99 00000000         ;     11=SVCall
  100 00000000         ;     12-13:(reserved)
  101 00000000         ;     14=PendSV
  102 00000000         ;     15=SysTick
  103 00000000         ;     16=IRQ0
  104 00000000         ;     16-47:IRQ(Exception number - 16)



ARM Macro Assembler    Page 4 Program Title for Listing Header Goes Here


  105 00000000         ;     47=IRQ31
  106 00000000         ;     48-63:(reserved)
  107 00000000 0000003F 
                       IPSR_MASK
                               EQU              0x0000003F
  108 00000000 00000000 
                       IPSR_SHIFT
                               EQU              0
  109 00000000 0000003F 
                       IPSR_EXCEPTION_MASK
                               EQU              0x0000003F
  110 00000000 00000000 
                       IPSR_EXCEPTION_SHIFT
                               EQU              0
  111 00000000         ;-------------------------------------------------------
                       ---
  112 00000000 80000000 
                       PSR_N_MASK
                               EQU              APSR_N_MASK
  113 00000000 0000001F 
                       PSR_N_SHIFT
                               EQU              APSR_N_SHIFT
  114 00000000 40000000 
                       PSR_Z_MASK
                               EQU              APSR_Z_MASK
  115 00000000 0000001E 
                       PSR_Z_SHIFT
                               EQU              APSR_Z_SHIFT
  116 00000000 20000000 
                       PSR_C_MASK
                               EQU              APSR_C_MASK
  117 00000000 0000001D 
                       PSR_C_SHIFT
                               EQU              APSR_C_SHIFT
  118 00000000 10000000 
                       PSR_V_MASK
                               EQU              APSR_V_MASK
  119 00000000 0000001C 
                       PSR_V_SHIFT
                               EQU              APSR_V_SHIFT
  120 00000000 01000000 
                       PSR_T_MASK
                               EQU              EPSR_T_MASK
  121 00000000 00000018 
                       PSR_T_SHIFT
                               EQU              EPSR_T_SHIFT
  122 00000000 0000003F 
                       PSR_EXCEPTION_MASK
                               EQU              IPSR_EXCEPTION_MASK
  123 00000000 00000000 
                       PSR_EXCEPTION_SHIFT
                               EQU              IPSR_EXCEPTION_SHIFT
  124 00000000         ;-------------------------------------------------------
                       ---
  125 00000000         ;Stack
  126 00000000 00000100 
                       SSTACK_SIZE
                               EQU              0x00000100
  127 00000000         ;*******************************************************



ARM Macro Assembler    Page 5 Program Title for Listing Header Goes Here


                       *********
  128 00000000         ;Program
  129 00000000         ;Linker requires Reset_Handler
  130 00000000                 AREA             MyCode,CODE,READONLY
  131 00000000                 ENTRY
  132 00000000                 EXPORT           Reset_Handler
  133 00000000                 IMPORT           GetChar
  134 00000000                 IMPORT           InitIO
  135 00000000                 IMPORT           LengthStringSB
  136 00000000                 IMPORT           PutChar
  137 00000000                 IMPORT           TestIO
  138 00000000         Reset_Handler
                               PROC             {}
  139 00000000         main
  140 00000000         ;-------------------------------------------------------
                       --------
  141 00000000         ;Initialize registers R0-R12
  142 00000000 0000004F 
                       MAX_STRING
                               EQU              79
  143 00000000 0000000D 
                       CR      EQU              13
  144 00000000 0000000A 
                       LF      EQU              10
  145 00000000         ;>>>>> begin main program code <<<<<
  146 00000000 F7FF FFFE       BL               InitIO
  147 00000004         
  148 00000004 0004            MOVS             R4,R0       ; Number of iterati
                                                            ons we need to do
  149 00000006 2C00    main_iter
                               CMP              R4,#0       ; Iterations left
  150 00000008 D029            BEQ              finish
  151 0000000A 1E64            SUBS             R4,R4,#1    ; i--;
  152 0000000C         
  153 0000000C         ; Print the prompt string
  154 0000000C 4858            LDR              R0,=prompt
  155 0000000E 4959            LDR              R1,=promptend
  156 00000010 1A09            SUBS             R1,R1,R0    ; Get the size of R
                                                            0
  157 00000012 F7FF FFFE       BL               PutStringSB
  158 00000016         
  159 00000016         ; Get input line
  160 00000016 4858            LDR              R0,=buffer
  161 00000018 214F            MOVS             R1,#MAX_STRING
  162 0000001A F7FF FFFE       BL               GetStringSB
  163 0000001E         
  164 0000001E         ; Print the '<' character
  165 0000001E 4855            LDR              R0,=promptend
  166 00000020 2102            MOVS             R1,#2
  167 00000022 F7FF FFFE       BL               PutStringSB
  168 00000026         
  169 00000026         ; Print the string we got
  170 00000026 4854            LDR              R0,=buffer
  171 00000028 214F            MOVS             R1,#MAX_STRING
  172 0000002A F7FF FFFE       BL               PutStringSB
  173 0000002E         
  174 0000002E         ; Get the length we just printed
  175 0000002E F7FF FFFE       BL               LengthStringSB
  176 00000032 0002            MOVS             R2,R0       ; temporarily store



ARM Macro Assembler    Page 6 Program Title for Listing Header Goes Here


                                                             it here
  177 00000034         
  178 00000034         ; Print the '<' character
  179 00000034 484F            LDR              R0,=promptend
  180 00000036 2102            MOVS             R1,#2
  181 00000038 F7FF FFFE       BL               PutStringSB
  182 0000003C         
  183 0000003C         ; Print a new line
  184 0000003C 484F            LDR              R0,=newline
  185 0000003E 2103            MOVS             R1,#3
  186 00000040 F7FF FFFE       BL               PutStringSB
  187 00000044         
  188 00000044         ; Print "Length:"
  189 00000044 484E            LDR              R0,=length
  190 00000046 494F            LDR              R1,=len_end
  191 00000048 1A09            SUBS             R1,R1,R0
  192 0000004A F7FF FFFE       BL               PutStringSB
  193 0000004E         
  194 0000004E         ; Print the number
  195 0000004E 0010            MOVS             R0,R2       ; Print the length 
                                                            of the last getstri
                                                            ng
  196 00000050 F7FF FFFE       BL               PutNumU
  197 00000054         
  198 00000054         ; Print a new line
  199 00000054 4849            LDR              R0,=newline
  200 00000056 2103            MOVS             R1,#3
  201 00000058 F7FF FFFE       BL               PutStringSB
  202 0000005C         
  203 0000005C E7D3            B                main_iter
  204 0000005E         
  205 0000005E 2001    finish  MOVS             R0,#1       ; Extra credit
  206 00000060 F7FF FFFE       BL               TestIO
  207 00000064         ;>>>>> end main program code <<<<<
  208 00000064 E7FE            B                .
  209 00000066                 ENDP
  210 00000066         ;-------------------------------------------------------
                       --------
  211 00000066         
  212 00000066         ; Recieve a string from the command line terminated by C
                       R. 
  213 00000066         ; This should null terminate the string and shouldn't 
  214 00000066         ; overflow over the maxmimum size specified in R1.
  215 00000066         ; SUBROUTINES USED
  216 00000066         ;   - GetChar (recieve input)
  217 00000066         ;   - PutChar (Print each character as we get them)
  218 00000066         ; PARAMS
  219 00000066         ;   INPUT R0: pointer to the destination buffer (word ad
                       dress)
  220 00000066         ;   INPUT R1: size of the destination buffer    (unsigne
                       d word value)
  221 00000066         ;   OUTPUT  : String buffer stored in memory at R0
  222 00000066         GetStringSB
                               PROC             {R0-R3}
  223 00000066 B50F            PUSH             {R0-R3,LR}
  224 00000068         ; get_string_sb(char* str, size_t r1) {
  225 00000068         ;   char* ptr = str
  226 00000068         ;   while ((c = getchar()) != '\r')
  227 00000068         ;       if (ptr - str < r1 - 1)



ARM Macro Assembler    Page 7 Program Title for Listing Header Goes Here


  228 00000068         ;           *ptr = getchar();
  229 00000068         ;           printf("%c", *ptr)
  230 00000068         ;           ptr++
  231 00000068         ;   *ptr = '\0'
  232 00000068         ;   printf("\r\n")
  233 00000068 0003            MOVS             R3,R0
  234 0000006A 2200            MOVS             R2,#0       ; i = 0 (use a coun
                                                            ter instead of incr
                                                            ementing R3)
  235 0000006C 1E49            SUBS             R1,R1,#1
  236 0000006E F7FF FFFE 
                       getwhile
                               BL               GetChar     ; c = getchar()
  237 00000072 280D            CMP              R0,#CR      ; while (c != '\r')
                                                            
  238 00000074 D006            BEQ              getdone     ; break
  239 00000076 428A            CMP              R2,R1
  240 00000078 DAF9            BGE              getwhile    ; if (i >= r1 - 1) 
                                                            continue
  241 0000007A 5498            STRB             R0,[R3,R2]  ; r3[i] = r0
  242 0000007C F7FF FFFE       BL               PutChar     ; printf("%c", r0);
                                                            
  243 00000080 1C52            ADDS             R2,R2,#1    ; i++
  244 00000082 E7F4            B                getwhile
  245 00000084 2000    getdone MOVS             R0,#0       ; Add null terminat
                                                            or
  246 00000086 5498            STRB             R0,[R3,R2]
  247 00000088         
  248 00000088         ; print new line (Windows CRLF)
  249 00000088 200D            MOVS             R0,#CR
  250 0000008A F7FF FFFE       BL               PutChar
  251 0000008E 200A            MOVS             R0,#LF
  252 00000090 F7FF FFFE       BL               PutChar
  253 00000094 BD0F            POP              {PC,R0-R3}
  254 00000096                 ENDP
  255 00000096         
  256 00000096         ; Print a NULL terminated string
  257 00000096         ; SUBROUTINES USED
  258 00000096         ;   - PutChar (Print each character)
  259 00000096         ; PARAMS
  260 00000096         ;   INPUT R0: pointer to the target string (word address
                       )
  261 00000096         ;   INPUT R1: size of the string buffer so that to not o
                       verflow (unsigned word value)
  262 00000096         ;   OUTPUT  : NONE
  263 00000096         PutStringSB
                               PROC             {R0-R4}
  264 00000096 B51F            PUSH             {R0-R4,LR}
  265 00000098         ; put_string_sb(char* r0, size_t r1)
  266 00000098         ;   iter = r0
  267 00000098         ;   while (*iter && iter - r0 < r1 - 1)
  268 00000098         ;       printf("%c", *iter)
  269 00000098         ;       iter++
  270 00000098 0002            MOVS             R2,R0       ; iter = r0
  271 0000009A 0004            MOVS             R4,R0       ; start = r0 (r0 ne
                                                            eds to be used for 
                                                            printing)
  272 0000009C 1E49            SUBS             R1,R1,#1
  273 0000009E         



ARM Macro Assembler    Page 8 Program Title for Listing Header Goes Here


  274 0000009E 7813    putwhile
                               LDRB             R3,[R2,#0]  ; r3 = *iter
  275 000000A0 2B00            CMP              R3,#0       ; if (!*r3) break
  276 000000A2 D007            BEQ              putdone
  277 000000A4 1B13            SUBS             R3,R2,R4
  278 000000A6 428B            CMP              R3,R1       ; if (iter - start 
                                                            >= r1 - 1) break
  279 000000A8 DA04            BGE              putdone
  280 000000AA 7810            LDRB             R0,[R2,#0]  ; r0 = *iter
  281 000000AC F7FF FFFE       BL               PutChar     ; printf("%c", *ite
                                                            r);
  282 000000B0 1C52            ADDS             R2,R2,#1    ; iter++
  283 000000B2 E7F4            B                putwhile
  284 000000B4 BD1F    putdone POP              {R0-R4,PC}
  285 000000B6                 ENDP
  286 000000B6         
  287 000000B6         ; Print a number in decimal using the ascii
  288 000000B6         ; characters
  289 000000B6         ; SUBROUTINES USED
  290 000000B6         ;   - PutChar (Print each digit)
  291 000000B6         ;   - DIVU
  292 000000B6         ; PARAMS
  293 000000B6         ;   INPUT R0: Number to print (unsigned word value)
  294 000000B6         ;   OUTPUT  : NONE
  295 000000B6         PutNumU PROC             {R0-R2}
  296 000000B6 B507            PUSH             {R0-R2,LR}
  297 000000B8 0000000A 
                       printbase
                               EQU              10
  298 000000B8 00000030 
                       asciioffset
                               EQU              '0'
  299 000000B8         ; put_num_u(U32 r0)
  300 000000B8         ; while (r0 != 0)
  301 000000B8         ;   (add r0 % 10 to stack)
  302 000000B8         ;   r0 /= 10
  303 000000B8         ; print the stack backwards
  304 000000B8 2800            CMP              R0,#0       ; Just print a '0'
  305 000000BA D011            BEQ              numzero
  306 000000BC         
  307 000000BC 2200            MOVS             R2,#0       ; Count the number 
                                                            of digits
  308 000000BE 2800    numwhile
                               CMP              R0,#0       ; while (r0 != 0)
  309 000000C0 D005            BEQ              numwhile2
  310 000000C2 210A            MOVS             R1,#printbase ; Always divide b
                                                            y the base
  311 000000C4 F7FF FFFE       BL               DIVU        ; R0 = R0 / base; R
                                                            0 % base
  312 000000C8 B402            PUSH             {R1}        ; Need to print the
                                                            se digits backwards
                                                            
  313 000000CA 1C52            ADDS             R2,R2,#1    ; r2++
  314 000000CC E7F7            B                numwhile
  315 000000CE 2A01    numwhile2
                               CMP              R2,#1       ; while (r2 >= 1)
  316 000000D0 DB09            BLT              numdone
  317 000000D2 BC02            POP              {R1}
  318 000000D4 0008            MOVS             R0,R1



ARM Macro Assembler    Page 9 Program Title for Listing Header Goes Here


  319 000000D6 3030            ADDS             R0,R0,#asciioffset ; Print the 
                                                            next character (asc
                                                            ii not just value)
  320 000000D8 1E52            SUBS             R2,R2,#1
  321 000000DA F7FF FFFE       BL               PutChar
  322 000000DE E7F6            B                numwhile2
  323 000000E0 2030    numzero MOVS             R0,#'0'
  324 000000E2 F7FF FFFE       BL               PutChar
  325 000000E6 BD07    numdone POP              {R0-R2,PC}
  326 000000E8                 ENDP
  327 000000E8         
  328 000000E8         ; Calculate the quotient and remainder of
  329 000000E8         ; two unsigned word values.
  330 000000E8         ; SUBROUTINES: None
  331 000000E8         ; PARAMS:
  332 000000E8         ;   INPUT R0: dividend (unsigned word)
  333 000000E8         ;   INPUT R1: divisor  (unsigned word)
  334 000000E8         ;   OUTPUT R0: quotient (unsigned word)
  335 000000E8         ;   OUTPUT R1: remainder (unsigned word)
  336 000000E8         DIVU    PROC             {R0-R7}
  337 000000E8 B500            PUSH             {LR}
  338 000000EA B4FC            PUSH             {R2-R7}
  339 000000EC 2900            CMP              R1,#0
  340 000000EE D01D            BEQ              DIVU_0      ; Don't try to divi
                                                            de by zero
  341 000000F0 00000080 
                       LEFT_MASK
                               EQU              0x80        ; Used to get most 
                                                            significant bit of 
                                                            a byte
  342 000000F0 0000001F 
                       SHIFT32 EQU              31
  343 000000F0         ; Compute N / D
  344 000000F0         ; Use binary long division
  345 000000F0         ; R = 0 (Use R2)
  346 000000F0         ; Q = 0 (Use R3)
  347 000000F0         ; for (i = 31; i >= 0; i--) {
  348 000000F0         ;   R = R << 1
  349 000000F0         ;   R |= (N & LEFT_MASK) >> 31
  350 000000F0         ;   N = N << 1
  351 000000F0         ;   if R >= D {
  352 000000F0         ;       R = R - D
  353 000000F0         ;       Q |= 1 << i
  354 000000F0         ;   }
  355 000000F0         ; }
  356 000000F0 2200            MOVS             R2,#0       ; Init Remainder
  357 000000F2 2300            MOVS             R3,#0       ; Init the Quotient
                                                            
  358 000000F4 241F            MOVS             R4,#SHIFT32 ; Init the iterator
                                                             (i)
  359 000000F6 2601            MOVS             R6,#1       ; Used for Q = Q | 
                                                            (1 << i)
  360 000000F8 2C00    DIV_FOR CMP              R4,#0       ; if (i >= 0)
  361 000000FA DB0D            BLT              DIVU_FINISH ; Finished loop
  362 000000FC 0052            LSLS             R2,R2,#1    ; R = R << 1
  363 000000FE 0FC5            LSRS             R5,R0,#SHIFT32 ; R5 = most sign
                                                            ificant bit in N
  364 00000100 2601            MOVS             R6,#1
  365 00000102 4035            ANDS             R5,R5,R6    ; R5 = (N & LEFT_MA



ARM Macro Assembler    Page 10 Program Title for Listing Header Goes Here


                                                            SK) >> 31
  366 00000104 432A            ORRS             R2,R2,R5    ; R |= (N & LEFT_MA
                                                            SK) >> 31
  367 00000106 0040            LSLS             R0,R0,#1    ; N = N << 1
  368 00000108 428A            CMP              R2,R1       ; if (R >= D)
  369 0000010A D303            BLO              DIV_ITER    ; continue;
  370 0000010C 1A52            SUBS             R2,R2,R1    ; R = R - D
  371 0000010E 40A6            LSLS             R6,R6,R4    ; R6 = 1 << i
  372 00000110 0035            MOVS             R5,R6
  373 00000112 432B            ORRS             R3,R3,R5    ; Q = Q | (1 << i)
  374 00000114 1E64    DIV_ITER
                               SUBS             R4,R4,#1    ; i--
  375 00000116 E7EF            B                DIV_FOR     ; For loop
  376 00000118 0018    DIVU_FINISH
                               MOVS             R0,R3       ; Set the outputs
  377 0000011A 0011            MOVS             R1,R2       ;
  378 0000011C         ; Clear the carry flag
  379 0000011C F3EF 8200       MRS              R2,APSR
  380 00000120 2320            MOVS             R3,#0x20
  381 00000122 061B            LSLS             R3,R3,#24
  382 00000124 439A            BICS             R2,R2,R3
  383 00000126 F382 8800       MSR              APSR,R2
  384 0000012A E007            B                DIVU_STOP
  385 0000012C 2301    DIVU_0  MOVS             R3,#1       ; Init R3 as 1
  386 0000012E         ; Set the carry flag
  387 0000012E F3EF 8200       MRS              R2,APSR
  388 00000132 2320            MOVS             R3,#0x20
  389 00000134 061B            LSLS             R3,R3,#24
  390 00000136 431A            ORRS             R2,R2,R3
  391 00000138 F382 8800       MSR              APSR,R2
  392 0000013C BCFC    DIVU_STOP
                               POP              {R2-R7}
  393 0000013E BD00            POP              {PC}
  394 00000140                 ENDP
  395 00000140         
  396 00000140         ;*******************************************************
                       *********
  397 00000140         ;Initializes register n to value 0xnnnnnnnn, for n in 
  398 00000140         ;{0x0-0xC,0xE}
  399 00000140         ;*******************************************************
                       *********
  400 00000140         ;Put return on stack
  401 00000140         RegInit PROC             {}
  402 00000140 B500            PUSH             {LR}
  403 00000142         ;Initialize registers
  404 00000142 4915            LDR              R1,=0x11111111
  405 00000144 184A            ADDS             R2,R1,R1
  406 00000146 1853            ADDS             R3,R2,R1
  407 00000148 185C            ADDS             R4,R3,R1
  408 0000014A 1865            ADDS             R5,R4,R1
  409 0000014C 186E            ADDS             R6,R5,R1
  410 0000014E 1877            ADDS             R7,R6,R1
  411 00000150 1878            ADDS             R0,R7,R1
  412 00000152 4680            MOV              R8,R0
  413 00000154 1840            ADDS             R0,R0,R1
  414 00000156 4681            MOV              R9,R0
  415 00000158 1840            ADDS             R0,R0,R1
  416 0000015A 4682            MOV              R10,R0
  417 0000015C 1840            ADDS             R0,R0,R1



ARM Macro Assembler    Page 11 Program Title for Listing Header Goes Here


  418 0000015E 4683            MOV              R11,R0
  419 00000160 1840            ADDS             R0,R0,R1
  420 00000162 4684            MOV              R12,R0
  421 00000164 1840            ADDS             R0,R0,R1
  422 00000166 1840            ADDS             R0,R0,R1
  423 00000168 4686            MOV              R14,R0
  424 0000016A 2000            MOVS             R0,#0
  425 0000016C BD00            POP              {PC}
  426 0000016E                 ENDP
  427 0000016E         ;-------------------------------------------------------
                       --------
  428 0000016E         ;>>>>> begin subroutine code <<<<<
  429 0000016E         ;>>>>>   end subroutine code <<<<<
  430 0000016E 00 00           ALIGN
  431 00000170         ;*******************************************************
                       *********
  432 00000170         ;Vector Table Mapped to Address 0 at Reset
  433 00000170         ;Linker requires __Vectors to be exported
  434 00000170 00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              11111111         AREA             RESET, DATA, READONLY
  435 00000000                 EXPORT           __Vectors
  436 00000000                 EXPORT           __Vectors_End
  437 00000000                 EXPORT           __Vectors_Size
  438 00000000         __Vectors
  439 00000000         ;ARM core vectors
  440 00000000 00000000        DCD              __initial_sp ;00:end of stack
  441 00000004 00000000        DCD              Reset_Handler ;reset vector
  442 00000008 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 12 Program Title for Listing Header Goes Here


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00               SPACE            (VECTOR_TABLE_SIZE - (2 * VECTO
R_SIZE))
  443 000000C0         __Vectors_End
  444 000000C0 000000C0 
                       __Vectors_Size
                               EQU              __Vectors_End - __Vectors
  445 000000C0                 ALIGN
  446 000000C0         ;*******************************************************
                       *********
  447 000000C0         ;Constants
  448 000000C0                 AREA             MyConst,DATA,READONLY
  449 00000000         ;>>>>> begin constants here <<<<<
  450 00000000 45 6E 74 
              65 72 20 
              61 20 73 
              74 72 69 
              6E 67 3A 
              0D 0A 3E 
              00       prompt  DCB              "Enter a string:\r\n>\0"
  451 00000013 3C 00   promptend
                               DCB              "<\0"



ARM Macro Assembler    Page 13 Program Title for Listing Header Goes Here


  452 00000015 0D 0A 00 
                       newline DCB              "\r\n\0"
  453 00000018 4C 65 6E 
              67 74 68 
              3A 00    length  DCB              "Length:\0"
  454 00000020         len_end
  455 00000020         ;>>>>>   end constants here <<<<<
  456 00000020         ;*******************************************************
                       *********
  457 00000020                 AREA             |.ARM.__at_0x1FFFE000|,DATA,REA
DWRITE,ALIGN=3
  458 00000000                 EXPORT           __initial_sp
  459 00000000         ;Allocate system stack
  460 00000000                 IF               :LNOT::DEF:SSTACK_SIZE
  462                          ENDIF
  463 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 14 Program Title for Listing Header Goes Here


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       Stack_Mem
                               SPACE            SSTACK_SIZE
  464 00000100         __initial_sp
  465 00000100         ;*******************************************************
                       *********
  466 00000100         ;Variables
  467 00000100                 AREA             MyData,DATA,READWRITE
  468 00000000         ;>>>>> begin variables here <<<<<
  469 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 15 Program Title for Listing Header Goes Here


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       buffer  SPACE            MAX_STRING
  470 0000004F         ;>>>>>   end variables here <<<<<
  471 0000004F                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M0+ --apcs=inter
work --depend=.\objects\exercise05.d -o.\objects\exercise05.o -IC:\Keil_v5\ARM\
RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -I"C:\Users\Andrei Tumbar\AppData\Local
\Arm\Packs\NXP\MKL46Z4_DFP\10.0.3" --predefine="__EVAL SETA 1" --predefine="__U
VISION_VERSION SETA 531" --list=.\listings\exercise05.lst Exercise05.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DIVU 000000E8

Symbol: DIVU
   Definitions
      At line 336 in file Exercise05.s
   Uses
      At line 311 in file Exercise05.s
Comment: DIVU used once
DIVU_0 0000012C

Symbol: DIVU_0
   Definitions
      At line 385 in file Exercise05.s
   Uses
      At line 340 in file Exercise05.s
Comment: DIVU_0 used once
DIVU_FINISH 00000118

Symbol: DIVU_FINISH
   Definitions
      At line 376 in file Exercise05.s
   Uses
      At line 361 in file Exercise05.s
Comment: DIVU_FINISH used once
DIVU_STOP 0000013C

Symbol: DIVU_STOP
   Definitions
      At line 392 in file Exercise05.s
   Uses
      At line 384 in file Exercise05.s
Comment: DIVU_STOP used once
DIV_FOR 000000F8

Symbol: DIV_FOR
   Definitions
      At line 360 in file Exercise05.s
   Uses
      At line 375 in file Exercise05.s
Comment: DIV_FOR used once
DIV_ITER 00000114

Symbol: DIV_ITER
   Definitions
      At line 374 in file Exercise05.s
   Uses
      At line 369 in file Exercise05.s
Comment: DIV_ITER used once
GetStringSB 00000066

Symbol: GetStringSB
   Definitions
      At line 222 in file Exercise05.s
   Uses
      At line 162 in file Exercise05.s
Comment: GetStringSB used once
MyCode 00000000

Symbol: MyCode



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 130 in file Exercise05.s
   Uses
      None
Comment: MyCode unused
PutNumU 000000B6

Symbol: PutNumU
   Definitions
      At line 295 in file Exercise05.s
   Uses
      At line 196 in file Exercise05.s
Comment: PutNumU used once
PutStringSB 00000096

Symbol: PutStringSB
   Definitions
      At line 263 in file Exercise05.s
   Uses
      At line 157 in file Exercise05.s
      At line 167 in file Exercise05.s
      At line 172 in file Exercise05.s
      At line 181 in file Exercise05.s
      At line 186 in file Exercise05.s
      At line 192 in file Exercise05.s
      At line 201 in file Exercise05.s

RegInit 00000140

Symbol: RegInit
   Definitions
      At line 401 in file Exercise05.s
   Uses
      None
Comment: RegInit unused
Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 138 in file Exercise05.s
   Uses
      At line 132 in file Exercise05.s
      At line 441 in file Exercise05.s

finish 0000005E

Symbol: finish
   Definitions
      At line 205 in file Exercise05.s
   Uses
      At line 150 in file Exercise05.s
Comment: finish used once
getdone 00000084

Symbol: getdone
   Definitions
      At line 245 in file Exercise05.s
   Uses
      At line 238 in file Exercise05.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Comment: getdone used once
getwhile 0000006E

Symbol: getwhile
   Definitions
      At line 236 in file Exercise05.s
   Uses
      At line 240 in file Exercise05.s
      At line 244 in file Exercise05.s

main 00000000

Symbol: main
   Definitions
      At line 139 in file Exercise05.s
   Uses
      None
Comment: main unused
main_iter 00000006

Symbol: main_iter
   Definitions
      At line 149 in file Exercise05.s
   Uses
      At line 203 in file Exercise05.s
Comment: main_iter used once
numdone 000000E6

Symbol: numdone
   Definitions
      At line 325 in file Exercise05.s
   Uses
      At line 316 in file Exercise05.s
Comment: numdone used once
numwhile 000000BE

Symbol: numwhile
   Definitions
      At line 308 in file Exercise05.s
   Uses
      At line 314 in file Exercise05.s
Comment: numwhile used once
numwhile2 000000CE

Symbol: numwhile2
   Definitions
      At line 315 in file Exercise05.s
   Uses
      At line 309 in file Exercise05.s
      At line 322 in file Exercise05.s

numzero 000000E0

Symbol: numzero
   Definitions
      At line 323 in file Exercise05.s
   Uses
      At line 305 in file Exercise05.s
Comment: numzero used once



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

putdone 000000B4

Symbol: putdone
   Definitions
      At line 284 in file Exercise05.s
   Uses
      At line 276 in file Exercise05.s
      At line 279 in file Exercise05.s

putwhile 0000009E

Symbol: putwhile
   Definitions
      At line 274 in file Exercise05.s
   Uses
      At line 283 in file Exercise05.s
Comment: putwhile used once
23 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 434 in file Exercise05.s
   Uses
      None
Comment: RESET unused
__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 438 in file Exercise05.s
   Uses
      At line 435 in file Exercise05.s
      At line 444 in file Exercise05.s

__Vectors_End 000000C0

Symbol: __Vectors_End
   Definitions
      At line 443 in file Exercise05.s
   Uses
      At line 436 in file Exercise05.s
      At line 444 in file Exercise05.s

3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MyConst 00000000

Symbol: MyConst
   Definitions
      At line 448 in file Exercise05.s
   Uses
      None
Comment: MyConst unused
len_end 00000020

Symbol: len_end
   Definitions
      At line 454 in file Exercise05.s
   Uses
      At line 190 in file Exercise05.s
Comment: len_end used once
length 00000018

Symbol: length
   Definitions
      At line 453 in file Exercise05.s
   Uses
      At line 189 in file Exercise05.s
Comment: length used once
newline 00000015

Symbol: newline
   Definitions
      At line 452 in file Exercise05.s
   Uses
      At line 184 in file Exercise05.s
      At line 199 in file Exercise05.s

prompt 00000000

Symbol: prompt
   Definitions
      At line 450 in file Exercise05.s
   Uses
      At line 154 in file Exercise05.s
Comment: prompt used once
promptend 00000013

Symbol: promptend
   Definitions
      At line 451 in file Exercise05.s
   Uses
      At line 155 in file Exercise05.s
      At line 165 in file Exercise05.s
      At line 179 in file Exercise05.s

6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.ARM.__at_0x1FFFE000 00000000

Symbol: .ARM.__at_0x1FFFE000
   Definitions
      At line 457 in file Exercise05.s
   Uses
      None
Comment: .ARM.__at_0x1FFFE000 unused
Stack_Mem 00000000

Symbol: Stack_Mem
   Definitions
      At line 463 in file Exercise05.s
   Uses
      None
Comment: Stack_Mem unused
__initial_sp 00000100

Symbol: __initial_sp
   Definitions
      At line 464 in file Exercise05.s
   Uses
      At line 440 in file Exercise05.s
      At line 458 in file Exercise05.s

3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MyData 00000000

Symbol: MyData
   Definitions
      At line 467 in file Exercise05.s
   Uses
      None
Comment: MyData unused
buffer 00000000

Symbol: buffer
   Definitions
      At line 469 in file Exercise05.s
   Uses
      At line 160 in file Exercise05.s
      At line 170 in file Exercise05.s

2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

APSR_C_MASK 20000000

Symbol: APSR_C_MASK
   Definitions
      At line 77 in file Exercise05.s
   Uses
      At line 116 in file Exercise05.s
Comment: APSR_C_MASK used once
APSR_C_SHIFT 0000001D

Symbol: APSR_C_SHIFT
   Definitions
      At line 78 in file Exercise05.s
   Uses
      At line 117 in file Exercise05.s
Comment: APSR_C_SHIFT used once
APSR_MASK F0000000

Symbol: APSR_MASK
   Definitions
      At line 71 in file Exercise05.s
   Uses
      None
Comment: APSR_MASK unused
APSR_N_MASK 80000000

Symbol: APSR_N_MASK
   Definitions
      At line 73 in file Exercise05.s
   Uses
      At line 112 in file Exercise05.s
Comment: APSR_N_MASK used once
APSR_N_SHIFT 0000001F

Symbol: APSR_N_SHIFT
   Definitions
      At line 74 in file Exercise05.s
   Uses
      At line 113 in file Exercise05.s
Comment: APSR_N_SHIFT used once
APSR_SHIFT 0000001C

Symbol: APSR_SHIFT
   Definitions
      At line 72 in file Exercise05.s
   Uses
      None
Comment: APSR_SHIFT unused
APSR_V_MASK 10000000

Symbol: APSR_V_MASK
   Definitions
      At line 79 in file Exercise05.s
   Uses
      At line 118 in file Exercise05.s
Comment: APSR_V_MASK used once
APSR_V_SHIFT 0000001C

Symbol: APSR_V_SHIFT



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 80 in file Exercise05.s
   Uses
      At line 119 in file Exercise05.s
Comment: APSR_V_SHIFT used once
APSR_Z_MASK 40000000

Symbol: APSR_Z_MASK
   Definitions
      At line 75 in file Exercise05.s
   Uses
      At line 114 in file Exercise05.s
Comment: APSR_Z_MASK used once
APSR_Z_SHIFT 0000001E

Symbol: APSR_Z_SHIFT
   Definitions
      At line 76 in file Exercise05.s
   Uses
      At line 115 in file Exercise05.s
Comment: APSR_Z_SHIFT used once
BYTE_BITS 00000008

Symbol: BYTE_BITS
   Definitions
      At line 23 in file Exercise05.s
   Uses
      None
Comment: BYTE_BITS unused
BYTE_MASK 000000FF

Symbol: BYTE_MASK
   Definitions
      At line 20 in file Exercise05.s
   Uses
      None
Comment: BYTE_MASK unused
CONTROL_SPSEL_MASK 00000002

Symbol: CONTROL_SPSEL_MASK
   Definitions
      At line 47 in file Exercise05.s
   Uses
      None
Comment: CONTROL_SPSEL_MASK unused
CONTROL_SPSEL_SHIFT 00000001

Symbol: CONTROL_SPSEL_SHIFT
   Definitions
      At line 48 in file Exercise05.s
   Uses
      None
Comment: CONTROL_SPSEL_SHIFT unused
CONTROL_nPRIV_MASK 00000001

Symbol: CONTROL_nPRIV_MASK
   Definitions
      At line 49 in file Exercise05.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      None
Comment: CONTROL_nPRIV_MASK unused
CONTROL_nPRIV_SHIFT 00000000

Symbol: CONTROL_nPRIV_SHIFT
   Definitions
      At line 50 in file Exercise05.s
   Uses
      None
Comment: CONTROL_nPRIV_SHIFT unused
CR 0000000D

Symbol: CR
   Definitions
      At line 143 in file Exercise05.s
   Uses
      At line 237 in file Exercise05.s
      At line 249 in file Exercise05.s

EPSR_MASK 01000000

Symbol: EPSR_MASK
   Definitions
      At line 86 in file Exercise05.s
   Uses
      None
Comment: EPSR_MASK unused
EPSR_SHIFT 00000018

Symbol: EPSR_SHIFT
   Definitions
      At line 87 in file Exercise05.s
   Uses
      None
Comment: EPSR_SHIFT unused
EPSR_T_MASK 01000000

Symbol: EPSR_T_MASK
   Definitions
      At line 88 in file Exercise05.s
   Uses
      At line 120 in file Exercise05.s
Comment: EPSR_T_MASK used once
EPSR_T_SHIFT 00000018

Symbol: EPSR_T_SHIFT
   Definitions
      At line 89 in file Exercise05.s
   Uses
      At line 121 in file Exercise05.s
Comment: EPSR_T_SHIFT used once
HALFWORD_MASK 0000FFFF

Symbol: HALFWORD_MASK
   Definitions
      At line 29 in file Exercise05.s
   Uses
      None
Comment: HALFWORD_MASK unused



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

HALFWORD_SIZE 00000002

Symbol: HALFWORD_SIZE
   Definitions
      At line 27 in file Exercise05.s
   Uses
      None
Comment: HALFWORD_SIZE unused
IPSR_EXCEPTION_MASK 0000003F

Symbol: IPSR_EXCEPTION_MASK
   Definitions
      At line 109 in file Exercise05.s
   Uses
      At line 122 in file Exercise05.s
Comment: IPSR_EXCEPTION_MASK used once
IPSR_EXCEPTION_SHIFT 00000000

Symbol: IPSR_EXCEPTION_SHIFT
   Definitions
      At line 110 in file Exercise05.s
   Uses
      At line 123 in file Exercise05.s
Comment: IPSR_EXCEPTION_SHIFT used once
IPSR_MASK 0000003F

Symbol: IPSR_MASK
   Definitions
      At line 107 in file Exercise05.s
   Uses
      None
Comment: IPSR_MASK unused
IPSR_SHIFT 00000000

Symbol: IPSR_SHIFT
   Definitions
      At line 108 in file Exercise05.s
   Uses
      None
Comment: IPSR_SHIFT unused
LEFT_MASK 00000080

Symbol: LEFT_MASK
   Definitions
      At line 341 in file Exercise05.s
   Uses
      None
Comment: LEFT_MASK unused
LF 0000000A

Symbol: LF
   Definitions
      At line 144 in file Exercise05.s
   Uses
      At line 251 in file Exercise05.s
Comment: LF used once
MAX_STRING 0000004F

Symbol: MAX_STRING



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 142 in file Exercise05.s
   Uses
      At line 161 in file Exercise05.s
      At line 171 in file Exercise05.s
      At line 469 in file Exercise05.s

NIBBLE_BITS 00000004

Symbol: NIBBLE_BITS
   Definitions
      At line 24 in file Exercise05.s
   Uses
      None
Comment: NIBBLE_BITS unused
NIBBLE_MASK 0000000F

Symbol: NIBBLE_MASK
   Definitions
      At line 21 in file Exercise05.s
   Uses
      None
Comment: NIBBLE_MASK unused
PRIMASK_PM_MASK 00000001

Symbol: PRIMASK_PM_MASK
   Definitions
      At line 59 in file Exercise05.s
   Uses
      None
Comment: PRIMASK_PM_MASK unused
PRIMASK_PM_SHIFT 00000000

Symbol: PRIMASK_PM_SHIFT
   Definitions
      At line 60 in file Exercise05.s
   Uses
      None
Comment: PRIMASK_PM_SHIFT unused
PSR_C_MASK 20000000

Symbol: PSR_C_MASK
   Definitions
      At line 116 in file Exercise05.s
   Uses
      None
Comment: PSR_C_MASK unused
PSR_C_SHIFT 0000001D

Symbol: PSR_C_SHIFT
   Definitions
      At line 117 in file Exercise05.s
   Uses
      None
Comment: PSR_C_SHIFT unused
PSR_EXCEPTION_MASK 0000003F

Symbol: PSR_EXCEPTION_MASK
   Definitions



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Absolute symbols

      At line 122 in file Exercise05.s
   Uses
      None
Comment: PSR_EXCEPTION_MASK unused
PSR_EXCEPTION_SHIFT 00000000

Symbol: PSR_EXCEPTION_SHIFT
   Definitions
      At line 123 in file Exercise05.s
   Uses
      None
Comment: PSR_EXCEPTION_SHIFT unused
PSR_N_MASK 80000000

Symbol: PSR_N_MASK
   Definitions
      At line 112 in file Exercise05.s
   Uses
      None
Comment: PSR_N_MASK unused
PSR_N_SHIFT 0000001F

Symbol: PSR_N_SHIFT
   Definitions
      At line 113 in file Exercise05.s
   Uses
      None
Comment: PSR_N_SHIFT unused
PSR_T_MASK 01000000

Symbol: PSR_T_MASK
   Definitions
      At line 120 in file Exercise05.s
   Uses
      None
Comment: PSR_T_MASK unused
PSR_T_SHIFT 00000018

Symbol: PSR_T_SHIFT
   Definitions
      At line 121 in file Exercise05.s
   Uses
      None
Comment: PSR_T_SHIFT unused
PSR_V_MASK 10000000

Symbol: PSR_V_MASK
   Definitions
      At line 118 in file Exercise05.s
   Uses
      None
Comment: PSR_V_MASK unused
PSR_V_SHIFT 0000001C

Symbol: PSR_V_SHIFT
   Definitions
      At line 119 in file Exercise05.s
   Uses
      None



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Absolute symbols

Comment: PSR_V_SHIFT unused
PSR_Z_MASK 40000000

Symbol: PSR_Z_MASK
   Definitions
      At line 114 in file Exercise05.s
   Uses
      None
Comment: PSR_Z_MASK unused
PSR_Z_SHIFT 0000001E

Symbol: PSR_Z_SHIFT
   Definitions
      At line 115 in file Exercise05.s
   Uses
      None
Comment: PSR_Z_SHIFT unused
RET_ADDR_T_MASK 00000001

Symbol: RET_ADDR_T_MASK
   Definitions
      At line 31 in file Exercise05.s
   Uses
      None
Comment: RET_ADDR_T_MASK unused
SHIFT32 0000001F

Symbol: SHIFT32
   Definitions
      At line 342 in file Exercise05.s
   Uses
      At line 358 in file Exercise05.s
      At line 363 in file Exercise05.s

SSTACK_SIZE 00000100

Symbol: SSTACK_SIZE
   Definitions
      At line 126 in file Exercise05.s
   Uses
      At line 463 in file Exercise05.s
Comment: SSTACK_SIZE used once
VECTOR_SIZE 00000004

Symbol: VECTOR_SIZE
   Definitions
      At line 37 in file Exercise05.s
   Uses
      At line 442 in file Exercise05.s
Comment: VECTOR_SIZE used once
VECTOR_TABLE_SIZE 000000C0

Symbol: VECTOR_TABLE_SIZE
   Definitions
      At line 36 in file Exercise05.s
   Uses
      At line 442 in file Exercise05.s
Comment: VECTOR_TABLE_SIZE used once
WORD_SIZE 00000004



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Absolute symbols


Symbol: WORD_SIZE
   Definitions
      At line 26 in file Exercise05.s
   Uses
      None
Comment: WORD_SIZE unused
__Vectors_Size 000000C0

Symbol: __Vectors_Size
   Definitions
      At line 444 in file Exercise05.s
   Uses
      At line 437 in file Exercise05.s
Comment: __Vectors_Size used once
asciioffset 00000030

Symbol: asciioffset
   Definitions
      At line 298 in file Exercise05.s
   Uses
      At line 319 in file Exercise05.s
Comment: asciioffset used once
printbase 0000000A

Symbol: printbase
   Definitions
      At line 297 in file Exercise05.s
   Uses
      At line 310 in file Exercise05.s
Comment: printbase used once
55 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

GetChar 00000000

Symbol: GetChar
   Definitions
      At line 133 in file Exercise05.s
   Uses
      At line 236 in file Exercise05.s
Comment: GetChar used once
InitIO 00000000

Symbol: InitIO
   Definitions
      At line 134 in file Exercise05.s
   Uses
      At line 146 in file Exercise05.s
Comment: InitIO used once
LengthStringSB 00000000

Symbol: LengthStringSB
   Definitions
      At line 135 in file Exercise05.s
   Uses
      At line 175 in file Exercise05.s
Comment: LengthStringSB used once
PutChar 00000000

Symbol: PutChar
   Definitions
      At line 136 in file Exercise05.s
   Uses
      At line 242 in file Exercise05.s
      At line 250 in file Exercise05.s
      At line 252 in file Exercise05.s
      At line 281 in file Exercise05.s
      At line 321 in file Exercise05.s
      At line 324 in file Exercise05.s

TestIO 00000000

Symbol: TestIO
   Definitions
      At line 137 in file Exercise05.s
   Uses
      At line 206 in file Exercise05.s
Comment: TestIO used once
5 symbols
431 symbols in table
